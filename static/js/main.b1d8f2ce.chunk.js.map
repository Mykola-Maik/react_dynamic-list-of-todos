{"version":3,"sources":["types/OptionType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers.ts","index.tsx"],"names":["OptionType","TodoItem","todo","isSelected","onSelectedTodoChangeHandler","id","completed","title","className","cn","type","onClick","TodoList","todos","selectedTodoId","onSelectedTodo","selectedTodoChangeHandler","map","TodoFilter","searchQuery","onSearchQuery","onSelectedOption","onChange","event","target","value","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onSelectedToDo","useState","user","setUser","useEffect","userId","response","href","email","name","App","setTodos","selectedTodo","setSelectedTodo","isLoading","setIsLoading","setSearchQuery","selectedOption","setSelectedOption","finally","visibleTodos","useMemo","data","option","filter","Error","successFilter","query","toLowerCase","includes","filterByQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1d8f2ce.chunk.js","sourcesContent":["export enum OptionType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  isSelected: boolean;\n  onSelectedTodoChangeHandler: (todo: Todo) => void;\n}\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  isSelected,\n  onSelectedTodoChangeHandler,\n}) => {\n  const {\n    id,\n    completed,\n    title,\n  } = todo;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-danger': !completed,\n          'has-text-success': completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectedTodoChangeHandler(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isSelected,\n              'fa-eye-slash': isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodoId: number | undefined;\n  onSelectedTodo: (todo: Todo) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onSelectedTodo,\n}) => {\n  const selectedTodoChangeHandler = (todo: Todo) => {\n    onSelectedTodo(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const isSelected = todo.id === selectedTodoId;\n\n          return (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              isSelected={isSelected}\n              onSelectedTodoChangeHandler={selectedTodoChangeHandler}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { OptionType } from '../../types/OptionType';\n\ninterface Props {\n  searchQuery: string;\n  onSearchQuery: (arg: string) => void;\n  onSelectedOption: (arg: OptionType) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  searchQuery,\n  onSearchQuery,\n  onSelectedOption,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={\n            (event) => onSelectedOption(event.target.value as OptionType)\n          }\n        >\n          <option\n            value={OptionType.ALL}\n          >\n            All\n          </option>\n          <option\n            value={OptionType.ACTIVE}\n          >\n            Active\n          </option>\n          <option\n            value={OptionType.COMPLETED}\n          >\n            Completed\n          </option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={(event) => onSearchQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onSearchQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo | null;\n  onSelectedToDo: (todo:Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  onSelectedToDo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (todo?.userId) {\n      getUser(todo.userId)\n        .then(response => {\n          setUser(response);\n        });\n    }\n  }, []);\n\n  const clearModal = () => {\n    onSelectedToDo(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={clearModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (\n                  <>\n                    <strong className=\"has-text-success\">Done</strong>\n                    {' by '}\n                    <a href={`mailto:${user?.email}`}>\n                      {user?.name}\n                    </a>\n                  </>\n                ) : (\n                  <>\n                    <strong className=\"has-text-danger\">Planned</strong>\n                    {' by '}\n                    <a href={`mailto:${user?.email}`}>\n                      {user?.name}\n                    </a>\n                  </>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './app.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { OptionType } from './types/OptionType';\nimport { successFilter, filterByQuery } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState<OptionType>(OptionType.ALL);\n\n  useEffect(() => {\n    getTodos()\n      .then(response => {\n        setTodos(response);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    const data = successFilter(todos, selectedOption);\n\n    return filterByQuery(data, searchQuery);\n  }, [todos, selectedOption, searchQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                onSearchQuery={setSearchQuery}\n                onSelectedOption={setSelectedOption}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={selectedTodo?.id}\n                  onSelectedTodo={setSelectedTodo}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onSelectedToDo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { OptionType } from './types/OptionType';\nimport { Todo } from './types/Todo';\n\nexport const successFilter = (todos: Todo[], option: OptionType) => {\n  switch (option) {\n    case OptionType.ALL:\n      return todos;\n    case OptionType.ACTIVE:\n      return todos.filter(todo => !todo.completed);\n    case OptionType.COMPLETED:\n      return todos.filter(todo => todo.completed);\n    default:\n      throw new Error('Error, incorrect option.');\n  }\n};\n\nexport const filterByQuery = (todos: Todo[], query: string): Todo[] => (\n  todos.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())))\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}